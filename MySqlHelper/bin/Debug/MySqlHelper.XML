<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySqlHelper</name>
    </assembly>
    <members>
        <member name="T:MySql.MysqlHelper.ConnectionString">
            <summary>
            Helper for generating connection string
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.server">
            <summary>
            The name or network address of the instance of MySQL to which to connect. Multiple hosts can be specified separated by commas. This can be useful where multiple MySQL servers are configured for replication and you are not concerned about the precise server you are connecting to. No attempt is made by the provider to synchronize writes to the database, so take care when using this option. In Unix environment with Mono, this can be a fully qualified path to a MySQL socket file. With this configuration, the Unix socket is used instead of the TCP/IP socket. Currently, only a single socket name can be given, so accessing MySQL in a replicated environment using Unix sockets is not currently supported.
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.username">
            <summary>
            The MySQL login account being used.
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.password">
            <summary>
            The password for the MySQL account being used.
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.port">
            <summary>
            The port MySQL is using to listen for connections. This value is ignored if Unix socket is used.
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.pooling">
            <summary>
            When true, the MySqlConnection object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool. Recognized values are true, false, yes, and no.
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.compress">
            <summary>
            Setting this option to true enables compression of packets exchanged between the client and the server. This exchange is defined by the MySQL client/server protocol. Compression is used if both client and server support ZLIB compression, and the client has requested compression using this option. A compressed packet header is: packet length (3 bytes), packet number (1 byte), and Uncompressed Packet Length (3 bytes). The Uncompressed Packet Length is the number of bytes in the original, uncompressed packet. If this is zero, the data in this packet has not been compressed. When the compression protocol is in use, either the client or the server may compress packets. However, compression will not occur if the compressed length is greater than the original length. Thus, some packets will contain compressed data while other packets will not. 
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.defaultCommandTimeout">
            <summary>
            Sets the default value of the command timeout to be used. This does not supersede the individual command timeout property on an individual command object. If you set the command timeout property, that will be used. This option was added in Connector/Net 5.1.4
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.connectionTimeout">
            <summary>
            The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.convertZeroDateTime">
            <summary>
            True to have MySqlDataReader.GetValue() and MySqlDataReader.GetDateTime() return DateTime.MinValue for date or datetime columns that have disallowed values.
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.allowBatch">
            <summary>
            When true, multiple SQL statements can be sent with one command execution. Note: starting with MySQL 4.1.1, batch statements should be separated by the server-defined separator character. Statements sent to earlier versions of MySQL should be separated by ';'
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.allowUserVariables">
            <summary>
            Setting this to true indicates that the provider expects user variables in the SQL. This option was added in Connector/Net version 5.2.2.
            </summary>
        </member>
        <member name="F:MySql.MysqlHelper.ConnectionString.allowZeroDatetime">
            <summary>
            If set to True, MySqlDataReader.GetValue() returns a MySqlDateTime object for date or datetime columns that have disallowed values, such as zero datetime values, and a System.DateTime object for valid values. If set to False (the default setting) it causes a System.DateTime object to be returned for all valid values and an exception to be thrown for disallowed values, such as zero datetime values.
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.ConnectionString.#ctor(System.String,System.String,System.String,System.UInt32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.ConnectionString.ToString">
            <summary>
            ToString() override
            </summary>
            <returns>Returns a valid connection string</returns>
        </member>
        <member name="M:MySql.MysqlHelper.Default.SetConnectionString(MySql.MysqlHelper.ConnectionString)">
            <summary>
            Sets connection string
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.Default.GetID">
            <summary>
            Generates instance ID
            </summary>
            <returns>Current Instance ID</returns>
        </member>
        <member name="M:MySql.MysqlHelper.Default.OpenConnection(MySql.Data.MySqlClient.MySqlConnection,System.Int32)">
            <summary>
            Opens a connection to the server
            </summary>
        </member>
        <member name="P:MySql.MysqlHelper.Default.connectionString">
            <summary>
            Current connectionstring in use
            </summary>
        </member>
        <member name="T:MySql.MysqlHelper.Log">
            <summary>
            Log class
            </summary>
        </member>
        <member name="T:MySql.MysqlHelper.ColumnData">
            <summary>
            Container class for column name and column data
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.ColumnData.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MySql.MysqlHelper.InformationSchema.TableUpdateTime">
            <summary>
            Table update check class
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.InformationSchema.TableUpdateTime.#ctor(MySql.MysqlHelper.ConnectionString)">
            <summary>
            Constructor for connection string
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.InformationSchema.TableUpdateTime.#ctor(MySql.MysqlHelper.MultiCon)">
            <summary>
            Constructor for connectiong string class
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.InformationSchema.TableUpdateTime.HasChanged(System.String,System.String)">
            <summary>
            Returns true if table has been updated since last HasChanged check. First time always returns true
            Update time is not available for INNODB
            </summary>
        </member>
        <member name="T:MySql.MysqlHelper.MultiCon">
            <summary>
            Opens and closes a connection for each query. When not doing transactions or working with memory tables
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.#ctor(MySql.MysqlHelper.ConnectionString)">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.InsertRow(System.String,System.String,System.Collections.Generic.IEnumerable{MySql.MysqlHelper.ColumnData},System.Boolean)">
            <summary>
            Inserts a row
            </summary>
            <param name="database">Destination database</param>
            <param name="table">Destination table</param>
            <param name="listColData">Columns and their data</param>
            <param name="onDupeUpdate">If duplicate, update duplicate with new values</param>
            <returns>Returns last insertion ID</returns>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.UpdateRow(System.String,System.String,System.Collections.Generic.IEnumerable{MySql.MysqlHelper.ColumnData},System.String,System.Int32)">
            <summary>
            Updates a row or rows
            </summary>
            <param name="database">Destination database</param>
            <param name="table">Destination table</param>
            <param name="listColData">Columns and their data</param>
            <param name="where">Which row(s) to update, null = all</param>
            <param name="limit">amount of rows to update. 0 = all</param>
            <returns>Returns update count</returns>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.BulkSend(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Sends entire datatable to database. Name of column in datatable should equal name of column in database table
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.BulkSend(System.String,System.String,System.Data.DataTable,System.Int32)">
            <summary>
            Sends an entire datatable to specified table. Make sure that column names of table correspond to database
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.GetFirst``1(System.String,System.Boolean)">
            <summary>
            Returns a list containing the first column
            <param name="parse">Parses the object as a string instead of explicit conversion</param>
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.GetObject(System.String)">
            <summary>
            Returns a field from the server as a object
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.GetObject``1(System.String)">
            <summary>
            Returns a field from the server as specified type using explicit type conversion.
            Will throw exception if type is wrong
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.GetObjectParse``1(System.String)">
            <summary>
            Parses selected field value, making it less vulnerable for different types 
            (int -> uint when you know that the value should be above 0 etc)
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.SendQuery(System.String)">
            <summary>
            Sends query to server
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.GetDataTable(System.String)">
            <summary>
            Returns all selected data as a datatable
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.MultiCon.GetMysqlConnection">
            <summary>
            Returns the default connecition data
            </summary>
        </member>
        <member name="T:MySql.MysqlHelper.OneCon">
            <summary>
            Uses only one connection. To be used with transactions and memory tables etc
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.#ctor(MySql.MysqlHelper.ConnectionString,System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
            <param name="isTransaction">Should be true when a transaction is to follow. If not, queries will be carried out as made</param>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.Commit(System.Boolean)">
            <summary>
            Commits transaction
            </summary>
            <param name="respring">if a new transaction is to follow, this should be true</param>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.Rollback">
            <summary>
            Rolls the transaction back
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.InsertRow(System.String,System.String,System.Collections.Generic.IEnumerable{MySql.MysqlHelper.ColumnData},System.Boolean)">
            <summary>
            Inserts a row
            </summary>
            <param name="database">Destination database</param>
            <param name="table">Destination table</param>
            <param name="listColData">Columns and their data</param>
            <param name="onDupeUpdate">If duplicate, update duplicate with new values</param>
            <returns>Returns last insertion ID</returns>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.UpdateRow(System.String,System.String,System.Collections.Generic.IEnumerable{MySql.MysqlHelper.ColumnData},System.String,System.Int32)">
            <summary>
            Updates a row or rows
            </summary>
            <param name="database">Destination database</param>
            <param name="table">Destination table</param>
            <param name="listColData">Columns and their data</param>
            <param name="where">Which row(s) to update, null = all</param>
            <param name="limit">amount of rows to update. 0 = all</param>
            <returns>Returns update count</returns>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.SendQuery(System.String)">
            <summary>
            Sends query to server
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.GetObject(System.String)">
            <summary>
            Returns a field from the server as a object
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.GetObject``1(System.String)">
            Returns a field from the server as specified type using explicit type conversion.
            Will throw exception if type is wrong
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.GetObjectParse``1(System.String)">
            <summary>
            Parses selected field value, making it less vulnerable for different types (int to uint etc)
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.GetDataTable(System.String)">
            <summary>
            Returns all selected data as a datatable
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.BulkSend(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Sends an entire collection to specified column
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.BulkSend(System.String,System.String,System.Data.DataTable,System.Int32)">
            <summary>
            Sends an entire datatable to specified table. Make sure that column names of table correspond to database
            </summary>
        </member>
        <member name="M:MySql.MysqlHelper.OneCon.GetFirst``1(System.String,System.Boolean)">
            <summary>
            Returns a list containing the first field of each row
            <param name="parse">Parses the object as a string instead of explicit conversion</param>
            </summary>
        </member>
    </members>
</doc>
